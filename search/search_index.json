{"config":{"indexing":"full","lang":["en","fr","de"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Furman QA Docs For full documentation visit mkdocs.org . Subscribe to our newsletter First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"About"},{"location":"#welcome-to-furman-qa-docs","text":"For full documentation visit mkdocs.org . Subscribe to our newsletter First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell","title":"Welcome to Furman QA Docs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"pages/about/","text":"","title":"About"},{"location":"pages/faq/","text":"","title":"Faq"},{"location":"pages/qa-automations/qa_automations_cypress_javascript/","text":"QA Automaton Framework Setup Cypress This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Install git (Version Control System) Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install VSCode (Integrated Development Environment) 01. Installation Steps Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Create a new project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Type and follow instructions: npm init Install Cypress: npm install cypress --save-dev (Latest version) npm install cypress@6.8.0 --save-dev npm install cypress@6.9.1 --save-dev npm install cypress@7.7.0 --save-dev Start Cypress Test Runner (type in CMD or VSCode terminal): node_modules.bin\\cypress open (Run in background) node_modules.bin\\cypress open \u2014headed (Run in UI) Clone project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Clone application under test Type the following commands: git clone https://github.com/filiphric/cypress-tau-course.git npm install (install all dependencies) npm start (in browser type: http://localhost:4200/) Clone application outside test Type the following commands: git clone https://git.nosolutions.rs/vladan.furman/dating.git npm install (install all dependencies) npm start (in browser: http://localhost:4200/) 02. Brief details about the files and folders project_name/dating (root) cypress fixtures (This folder contains CSV, HTML, or JSON files) example.json example.csv integrations (This folder provides a place that writes out test cases) 01_SD_Smoke_Tests 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_SD_Regression_Tests 01_landing_page 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_signup 02_01_test_signup_form_eng.spec.js 02_02_test_signup_form_ger.spec.js 03_registration 03_01_test_signup_form_eng.spec.js 03_02_test_signup_form_ger.spec.js 04_login 04_01_test_login_eng.spec.js 04_02_test_login_ger.spec.js plugins (This folder contains the plugins or listeners) index.js reports (This folder contains html reports runnable within your browser) mocha mochareports support (Writes customized commands or reusable methods that are available for usage in all of your spec/test files.) page_objects helpers.js (Functions or actions. E.g. delete all photos, select language, api - post actions, api - setup default state) navigations.js (Functions or actions. E.g. navigate to log in, navigate to profile menu, navigate to search tab) login.js (Functions or actions. E.g. login different users) commands.js (This file contains commands for starting different environment and to store .json file from fixture folder before test start) Cypress.Commands.add('openApplication') cy.visit('Cypress.env(url)') cy.fixture('users') index.js (This file is processed and loaded automatically before your test files. Global configuration. Behavior that modifies Cypress) import './commands' (This is by default) videos (This folder contains videos that will be saved after test execution) 01_SD_Smoke_Tests 02_SD_Regression_Tests node_modules (This is the folder where NPM installs all the project dependencies.) cypress.env.json (This file contains different development stages) \u201cdevUrl\u201d: https://develop.xxxxx.date \u201cstageUrl\u201d: https://staging.xxxxx.date cypress.json (This file contains different Cypress configurations options. E.g., timeout, base URL, test files, or any other configuration.) \"chromeWebSecurity\": false \"defaultCommandTimeout\": 15000 \"requestTimeout\": 15000 \"screenshotsFolder\": \"cypress/reports/mochareports/assets\" ... e2e-run-tests.js (This file contains run commands) cypress.run (spec: \"test.spec.js\") package.json (This file contains scripts, and dependencies used in our scripts) scripts: (We use these commands to run scripts from the terminal or commander) \u201ccypress:open\u201d: \u201cnode_modules\\.bin\\cypress open\u201d \u201ccypress:run\u201d: \u201ccypress run \u2014headless \u2014browser chrome\u201d devDependencies: cypress: 6.9.1 cypress-file-upload: 5.0.6 cypress-iframe: 1.0.1 cypress-multi-reporters: 1.5.0 cypress-wait-until: 1.7.1 cy-mobile-commands: 0.2.1 mocha: 8.3.2 mochawesome: 6.2.2 mochawesome-merge: 4.2.0 mochawesome-report-generator: 5.2.0 moment: 2.29.1 package-lock.json Additional Details: Fixtures are external pieces of static data that can be used by your tests. We should not hard code data in the test case. It should drive from an external source like CSV, HTML, or JSON. They will be majorly used with the cy.fixture() command when you need to stub the network calls. Integration folder provides a place that writes out test cases. It also provides an \u201cexamples\u201d directory, which contains the default test cases provided by Cypress and can be used to add new test cases also. We can also create our folder under the integration directory and add out test cases under that. Plugins contain the plugins or listeners. By default, Cypress will automatically include the plugins file \u201ccypress/plugins/index.js\u201d before every test it runs. You can programmatically alter the resolved configuration and environment variables using plugins, Eg. If we have to inject customized options to browsers like accepting the certificate, or do any activity on test case pass or fail or to handle any other events like handling screenshots. They enable you to extend or modify the existing behavior of Cypress. Support writes customized commands or reusable methods that are available for usage in all of your spec/test files. This file runs before every single spec file. That\u2019s why you don\u2019t have to import this file in every single one of your spec files. The \u201csupport\u201d file is a great place to put reusable behavior such as Custom Commands or global overrides that you want to be applied and available to all of your spec files. Node_Modules in the default project structure is the heart of the cypress project. All the node packages will be installed in the node_modules directory and will be available in all the test files. So, in a nutshell, this is the folder where NPM installs all the project dependencies. Cypress.json is used to store different configurations. E.g., timeout, base URL, test files, or any other configuration that we want to override for tweaking the behavior of Cypress. We can also manage the customized folder structure because it is part of by default Cypress Configurations. 03. Basic Cypress Actions Navigate to the web page you want to test (cy.visit) Locate the element of the web page you want to test and perform action (cy.get('button').click()) Run script from Cypress runner Run script with command from terminal and generate report and logs (node_modules.bin\\cypress run --spec \"cypress\\integration\\examples\\firsttest.js\") Navigate to report\\mochareports\\report.html 04. Tips Organize your tests - separate and categorize them Create folders to more accurately categorize files Split tests by category, e.g. in the 'user' folder put tests for login and registration, and in the 'shopping' folder - tests for the buying process. Write independent tests You should be able to choose any test or run several tests in any order and still get the same result. Set base URL Instead of repeating the lines with web addresses in each test, set the base URL in the 'cypress.json' file. Run tests, that are crucial at the moment - use \u2018cy.only\u2019 and \u2018cy.skip\u2019 Use your own custom commands Add your command to the 'commands.js' file Use the best selectors (CSS, By ID, By ClassName) Add assertions - to be sure that you are referring to the right element at the right time instead of wait(500). should('contain.text', 'Login') should('be.visible') 05. Tutorials and Useful Links https://docs.cypress.io/ https://www.udemy.com/course/cypress-web-automation-testing-from-zero-to-hero/ https://www.youtube.com/watch?v=gUFdU5fQs4o&list=PLSRQwlkmpdj6K7pwZmu9v5icbhAiGlQln&ab_channel=Cypress.io https://www.youtube.com/watch?v=avb-VDa3ZG4&t=2637s&ab_channel=LaithHarb https://www.youtube.com/watch?v=CYcdT-tOvB0&list=PLhW3qG5bs-L9LTfxZ5LEBiM1WFfvX3dJo&ab_channel=AutomationStepbyStep https://www.diogonunes.com/blog/cypress-tips-tricks/","title":"Cypress (Javascript)"},{"location":"pages/qa-automations/qa_automations_cypress_javascript/#qa-automaton-framework-setup","text":"","title":"QA Automaton Framework Setup"},{"location":"pages/qa-automations/qa_automations_cypress_javascript/#cypress","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Install git (Version Control System) Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install VSCode (Integrated Development Environment)","title":"Cypress"},{"location":"pages/qa-automations/qa_automations_cypress_javascript/#01-installation-steps","text":"Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Create a new project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Type and follow instructions: npm init Install Cypress: npm install cypress --save-dev (Latest version) npm install cypress@6.8.0 --save-dev npm install cypress@6.9.1 --save-dev npm install cypress@7.7.0 --save-dev Start Cypress Test Runner (type in CMD or VSCode terminal): node_modules.bin\\cypress open (Run in background) node_modules.bin\\cypress open \u2014headed (Run in UI) Clone project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Clone application under test Type the following commands: git clone https://github.com/filiphric/cypress-tau-course.git npm install (install all dependencies) npm start (in browser type: http://localhost:4200/) Clone application outside test Type the following commands: git clone https://git.nosolutions.rs/vladan.furman/dating.git npm install (install all dependencies) npm start (in browser: http://localhost:4200/)","title":"01. Installation Steps"},{"location":"pages/qa-automations/qa_automations_cypress_javascript/#02-brief-details-about-the-files-and-folders","text":"project_name/dating (root) cypress fixtures (This folder contains CSV, HTML, or JSON files) example.json example.csv integrations (This folder provides a place that writes out test cases) 01_SD_Smoke_Tests 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_SD_Regression_Tests 01_landing_page 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_signup 02_01_test_signup_form_eng.spec.js 02_02_test_signup_form_ger.spec.js 03_registration 03_01_test_signup_form_eng.spec.js 03_02_test_signup_form_ger.spec.js 04_login 04_01_test_login_eng.spec.js 04_02_test_login_ger.spec.js plugins (This folder contains the plugins or listeners) index.js reports (This folder contains html reports runnable within your browser) mocha mochareports support (Writes customized commands or reusable methods that are available for usage in all of your spec/test files.) page_objects helpers.js (Functions or actions. E.g. delete all photos, select language, api - post actions, api - setup default state) navigations.js (Functions or actions. E.g. navigate to log in, navigate to profile menu, navigate to search tab) login.js (Functions or actions. E.g. login different users) commands.js (This file contains commands for starting different environment and to store .json file from fixture folder before test start) Cypress.Commands.add('openApplication') cy.visit('Cypress.env(url)') cy.fixture('users') index.js (This file is processed and loaded automatically before your test files. Global configuration. Behavior that modifies Cypress) import './commands' (This is by default) videos (This folder contains videos that will be saved after test execution) 01_SD_Smoke_Tests 02_SD_Regression_Tests node_modules (This is the folder where NPM installs all the project dependencies.) cypress.env.json (This file contains different development stages) \u201cdevUrl\u201d: https://develop.xxxxx.date \u201cstageUrl\u201d: https://staging.xxxxx.date cypress.json (This file contains different Cypress configurations options. E.g., timeout, base URL, test files, or any other configuration.) \"chromeWebSecurity\": false \"defaultCommandTimeout\": 15000 \"requestTimeout\": 15000 \"screenshotsFolder\": \"cypress/reports/mochareports/assets\" ... e2e-run-tests.js (This file contains run commands) cypress.run (spec: \"test.spec.js\") package.json (This file contains scripts, and dependencies used in our scripts) scripts: (We use these commands to run scripts from the terminal or commander) \u201ccypress:open\u201d: \u201cnode_modules\\.bin\\cypress open\u201d \u201ccypress:run\u201d: \u201ccypress run \u2014headless \u2014browser chrome\u201d devDependencies: cypress: 6.9.1 cypress-file-upload: 5.0.6 cypress-iframe: 1.0.1 cypress-multi-reporters: 1.5.0 cypress-wait-until: 1.7.1 cy-mobile-commands: 0.2.1 mocha: 8.3.2 mochawesome: 6.2.2 mochawesome-merge: 4.2.0 mochawesome-report-generator: 5.2.0 moment: 2.29.1 package-lock.json","title":"02. Brief details about the files and folders"},{"location":"pages/qa-automations/qa_automations_cypress_javascript/#additional-details","text":"Fixtures are external pieces of static data that can be used by your tests. We should not hard code data in the test case. It should drive from an external source like CSV, HTML, or JSON. They will be majorly used with the cy.fixture() command when you need to stub the network calls. Integration folder provides a place that writes out test cases. It also provides an \u201cexamples\u201d directory, which contains the default test cases provided by Cypress and can be used to add new test cases also. We can also create our folder under the integration directory and add out test cases under that. Plugins contain the plugins or listeners. By default, Cypress will automatically include the plugins file \u201ccypress/plugins/index.js\u201d before every test it runs. You can programmatically alter the resolved configuration and environment variables using plugins, Eg. If we have to inject customized options to browsers like accepting the certificate, or do any activity on test case pass or fail or to handle any other events like handling screenshots. They enable you to extend or modify the existing behavior of Cypress. Support writes customized commands or reusable methods that are available for usage in all of your spec/test files. This file runs before every single spec file. That\u2019s why you don\u2019t have to import this file in every single one of your spec files. The \u201csupport\u201d file is a great place to put reusable behavior such as Custom Commands or global overrides that you want to be applied and available to all of your spec files. Node_Modules in the default project structure is the heart of the cypress project. All the node packages will be installed in the node_modules directory and will be available in all the test files. So, in a nutshell, this is the folder where NPM installs all the project dependencies. Cypress.json is used to store different configurations. E.g., timeout, base URL, test files, or any other configuration that we want to override for tweaking the behavior of Cypress. We can also manage the customized folder structure because it is part of by default Cypress Configurations.","title":"Additional Details:"},{"location":"pages/qa-automations/qa_automations_cypress_javascript/#03-basic-cypress-actions","text":"Navigate to the web page you want to test (cy.visit) Locate the element of the web page you want to test and perform action (cy.get('button').click()) Run script from Cypress runner Run script with command from terminal and generate report and logs (node_modules.bin\\cypress run --spec \"cypress\\integration\\examples\\firsttest.js\") Navigate to report\\mochareports\\report.html","title":"03. Basic Cypress Actions"},{"location":"pages/qa-automations/qa_automations_cypress_javascript/#04-tips","text":"Organize your tests - separate and categorize them Create folders to more accurately categorize files Split tests by category, e.g. in the 'user' folder put tests for login and registration, and in the 'shopping' folder - tests for the buying process. Write independent tests You should be able to choose any test or run several tests in any order and still get the same result. Set base URL Instead of repeating the lines with web addresses in each test, set the base URL in the 'cypress.json' file. Run tests, that are crucial at the moment - use \u2018cy.only\u2019 and \u2018cy.skip\u2019 Use your own custom commands Add your command to the 'commands.js' file Use the best selectors (CSS, By ID, By ClassName) Add assertions - to be sure that you are referring to the right element at the right time instead of wait(500). should('contain.text', 'Login') should('be.visible')","title":"04. Tips"},{"location":"pages/qa-automations/qa_automations_cypress_javascript/#05-tutorials-and-useful-links","text":"https://docs.cypress.io/ https://www.udemy.com/course/cypress-web-automation-testing-from-zero-to-hero/ https://www.youtube.com/watch?v=gUFdU5fQs4o&list=PLSRQwlkmpdj6K7pwZmu9v5icbhAiGlQln&ab_channel=Cypress.io https://www.youtube.com/watch?v=avb-VDa3ZG4&t=2637s&ab_channel=LaithHarb https://www.youtube.com/watch?v=CYcdT-tOvB0&list=PLhW3qG5bs-L9LTfxZ5LEBiM1WFfvX3dJo&ab_channel=AutomationStepbyStep https://www.diogonunes.com/blog/cypress-tips-tricks/","title":"05. Tutorials and Useful Links"},{"location":"pages/qa-automations/qa_automations_selenium_java/","text":"QA Automation Framework Setup Java + Selenium + Cucumber + TestProjectIO This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Must have account on Test Project cloud platform: TestProjectIO Run: TestProject Agent on your PC (If using TestProjectIO SDK instead of chromedriver) Install IntelliJ IDEACommunity Edition 01. Installation steps Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Download Maven (zip) Create folder (C:\\Program Files\\apache-maven-3.6.3), copy and unzip maven file. Setup environment variables for Maven: System Properties\\Advanced\\Environment Variables: MAVEN_HOME (C:\\Program Files\\apache-maven-3.6.3) Install NodeJS 14.17.6 System Properties\\Advanced\\Environment Variables\\Path: Within the Path set environment variable: %JAVA_HOME%\\bin %MAVEN_HOME%\\binF Download Chromedriver Download Selenium Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/Selenium/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Open project with IntelliJ Idea Run first test with Maven Optional: Download and install TestProjectIO Run TestProjectIO Agent Setup TestProjectIO Java SDK 02. Brief details about the files and folders project_name/sauce-demo Resources (This folder contains drivers etc chromedriver, geckodriver...) src/main/java/com.bwl/ (package folder) BaseClass.java (setDriver, driverQuit) LoginPage.java (waitForLogoPresence, clickOnLoginButton) test/java/com.bwl/ (package folder) StepDefinitions/ (package folder) Initialize.java (Before - setDriver, After - driverQuit) LoginStepDefinitions.java (Given, Then, When...) TestRunner (RunWith - CucumberOptions) test/resources features LoginUser.feature (Cucumber Features and Scenarios: Given, Then, When, Examples ) cucumber.properties target classes cucumber-reports generated-sources generated-test-sources test-classes pom.xml (This file contains all dependencies and plugins) 03. Dependencies list (pom.xml) build plugins plugin: - groupId: org.apache.maven.plugins - artifactId: maven-surefire-plugin - version: 3.0.0-M5 - configuration: - suiteXmlFile: testng.xml - groupId: net.masterhought - artifactId: maven-cucumber-reporting - version: 5.3.0 dependencies dependency: - groupId: io.testproject - artifactId: java-sdk - version: 1.2.3.-RELEASE - groupId: org.seleniumhq.selenium - artifactId: selenium-java - version: 3.141.59 - groupId: org.testng - artifactId: testng - version: 7.3.0 - groupId: io.cucumber - artifactId: cucumber-java - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-testng - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-core - version: 6.7.0 - groupId: org.junit.jupiter - artifactId: junit-jupiter-api - version: 5.5.2 - groupId: io.cucumber - artifactId: cucumber-junit - version: 6.11.0 properties - maven.compiler.source: 11 - maven.compiler.target: 11 04. Basic selenium actions Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test 05. Tips Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements inside of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements. 06. Tutorials and useful links https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"Selenium (Java)"},{"location":"pages/qa-automations/qa_automations_selenium_java/#qa-automation-framework-setup","text":"","title":"QA Automation Framework Setup"},{"location":"pages/qa-automations/qa_automations_selenium_java/#java-selenium-cucumber-testprojectio","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Must have account on Test Project cloud platform: TestProjectIO Run: TestProject Agent on your PC (If using TestProjectIO SDK instead of chromedriver) Install IntelliJ IDEACommunity Edition","title":"Java + Selenium + Cucumber + TestProjectIO"},{"location":"pages/qa-automations/qa_automations_selenium_java/#01-installation-steps","text":"Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Download Maven (zip) Create folder (C:\\Program Files\\apache-maven-3.6.3), copy and unzip maven file. Setup environment variables for Maven: System Properties\\Advanced\\Environment Variables: MAVEN_HOME (C:\\Program Files\\apache-maven-3.6.3) Install NodeJS 14.17.6 System Properties\\Advanced\\Environment Variables\\Path: Within the Path set environment variable: %JAVA_HOME%\\bin %MAVEN_HOME%\\binF Download Chromedriver Download Selenium Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/Selenium/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Open project with IntelliJ Idea Run first test with Maven Optional: Download and install TestProjectIO Run TestProjectIO Agent Setup TestProjectIO Java SDK","title":"01. Installation steps"},{"location":"pages/qa-automations/qa_automations_selenium_java/#02-brief-details-about-the-files-and-folders","text":"project_name/sauce-demo Resources (This folder contains drivers etc chromedriver, geckodriver...) src/main/java/com.bwl/ (package folder) BaseClass.java (setDriver, driverQuit) LoginPage.java (waitForLogoPresence, clickOnLoginButton) test/java/com.bwl/ (package folder) StepDefinitions/ (package folder) Initialize.java (Before - setDriver, After - driverQuit) LoginStepDefinitions.java (Given, Then, When...) TestRunner (RunWith - CucumberOptions) test/resources features LoginUser.feature (Cucumber Features and Scenarios: Given, Then, When, Examples ) cucumber.properties target classes cucumber-reports generated-sources generated-test-sources test-classes pom.xml (This file contains all dependencies and plugins)","title":"02. Brief details about the files and folders"},{"location":"pages/qa-automations/qa_automations_selenium_java/#03-dependencies-list-pomxml","text":"build plugins plugin: - groupId: org.apache.maven.plugins - artifactId: maven-surefire-plugin - version: 3.0.0-M5 - configuration: - suiteXmlFile: testng.xml - groupId: net.masterhought - artifactId: maven-cucumber-reporting - version: 5.3.0 dependencies dependency: - groupId: io.testproject - artifactId: java-sdk - version: 1.2.3.-RELEASE - groupId: org.seleniumhq.selenium - artifactId: selenium-java - version: 3.141.59 - groupId: org.testng - artifactId: testng - version: 7.3.0 - groupId: io.cucumber - artifactId: cucumber-java - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-testng - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-core - version: 6.7.0 - groupId: org.junit.jupiter - artifactId: junit-jupiter-api - version: 5.5.2 - groupId: io.cucumber - artifactId: cucumber-junit - version: 6.11.0 properties - maven.compiler.source: 11 - maven.compiler.target: 11","title":"03. Dependencies list (pom.xml)"},{"location":"pages/qa-automations/qa_automations_selenium_java/#04-basic-selenium-actions","text":"Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test","title":"04. Basic selenium actions"},{"location":"pages/qa-automations/qa_automations_selenium_java/#05-tips","text":"Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements inside of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements.","title":"05. Tips"},{"location":"pages/qa-automations/qa_automations_selenium_java/#06-tutorials-and-useful-links","text":"https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"06. Tutorials and useful links"},{"location":"pages/qa-automations/qa_automations_selenium_python/","text":"QA Automation Framework Setup Python + Selenium + HTML Report Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm 01. Installation steps Please do the following steps to set up the framework: Clone the repo & create the virtual env Clone the automations repo: git clone \"file\" Create a virtual env: python -m virtualenv venvs\\automations Activate the virtualenv: . .\\venvs\\automations\\bin\\activate Install dependencies (this can be done from pycharm): selenium==3.14.1 requests==2.23.0 pytest==6.0.1 pytest-html==2.0.1 pytest-xdist==2.5.0 openpyxl==3.0.9 pytest-metadata==1.10.0 PyYAML==5.3.1 c- lang==4.0.post1 urllib3==1.25.10 allure-pytest==2.8.40 stripe==2.37.2 pytz==2020.1 pytest-services==2.2.1 Install Chromedriver Make sure your version of Chrome is up to date, and install the latest Chromedriver for your version from https://chromedriver.chromium.org/. Unzip and copy Chromedriver or Geckodriver to: /Users/username/PycharmProjects/pytestSelenium_project/venv/bin/chromedriver Setup virtual environment: Install test requirements (from ~/projects/automations/): pip install -r test-requirements.txt 02. Brief details about the files and folders - pytestSelenium_project: - directory name: Logs - description: used for execution log files - python package: pageObjects/ - directory name: folder/ - description: this folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page. - directory name: Reports - description: this folder contains .html file - directory name: Screenshot - description: saved screenshot for specific scenario - directory name: TestData - description: .xml files - python package: tests/ - directory name: conf/ - file: confing.ini - description: this file is common file and contains common fixtures related to test scripts. - python package: tests/ - directory name: test_scripts/*.py - description: these are our actual automation test script. - python package: utilities/ - file: readProerties.py - description: this file contains common utility functions. - directory name: venv 03. Pytest commands - Run specific testcase: - pytest -v -s tests/test_scripts/test_login.py - Run specific testcase and create html report: - pytest -v -s \u2013html=Reports\\report.html tests/test_scripts/test_login.py 04. Basic selenium actions Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test 05. Tips Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements within of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements. 06. Tutorials and useful links https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"Selenium (Python)"},{"location":"pages/qa-automations/qa_automations_selenium_python/#qa-automation-framework-setup","text":"","title":"QA Automation Framework Setup"},{"location":"pages/qa-automations/qa_automations_selenium_python/#python-selenium-html-report","text":"Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm","title":"Python + Selenium + HTML Report"},{"location":"pages/qa-automations/qa_automations_selenium_python/#01-installation-steps","text":"Please do the following steps to set up the framework: Clone the repo & create the virtual env Clone the automations repo: git clone \"file\" Create a virtual env: python -m virtualenv venvs\\automations Activate the virtualenv: . .\\venvs\\automations\\bin\\activate Install dependencies (this can be done from pycharm): selenium==3.14.1 requests==2.23.0 pytest==6.0.1 pytest-html==2.0.1 pytest-xdist==2.5.0 openpyxl==3.0.9 pytest-metadata==1.10.0 PyYAML==5.3.1 c- lang==4.0.post1 urllib3==1.25.10 allure-pytest==2.8.40 stripe==2.37.2 pytz==2020.1 pytest-services==2.2.1 Install Chromedriver Make sure your version of Chrome is up to date, and install the latest Chromedriver for your version from https://chromedriver.chromium.org/. Unzip and copy Chromedriver or Geckodriver to: /Users/username/PycharmProjects/pytestSelenium_project/venv/bin/chromedriver Setup virtual environment: Install test requirements (from ~/projects/automations/): pip install -r test-requirements.txt","title":"01. Installation steps"},{"location":"pages/qa-automations/qa_automations_selenium_python/#02-brief-details-about-the-files-and-folders","text":"- pytestSelenium_project: - directory name: Logs - description: used for execution log files - python package: pageObjects/ - directory name: folder/ - description: this folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page. - directory name: Reports - description: this folder contains .html file - directory name: Screenshot - description: saved screenshot for specific scenario - directory name: TestData - description: .xml files - python package: tests/ - directory name: conf/ - file: confing.ini - description: this file is common file and contains common fixtures related to test scripts. - python package: tests/ - directory name: test_scripts/*.py - description: these are our actual automation test script. - python package: utilities/ - file: readProerties.py - description: this file contains common utility functions. - directory name: venv","title":"02. Brief details about the files and folders"},{"location":"pages/qa-automations/qa_automations_selenium_python/#03-pytest-commands","text":"- Run specific testcase: - pytest -v -s tests/test_scripts/test_login.py - Run specific testcase and create html report: - pytest -v -s \u2013html=Reports\\report.html tests/test_scripts/test_login.py","title":"03. Pytest commands"},{"location":"pages/qa-automations/qa_automations_selenium_python/#04-basic-selenium-actions","text":"Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test","title":"04. Basic selenium actions"},{"location":"pages/qa-automations/qa_automations_selenium_python/#05-tips","text":"Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements within of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements.","title":"05. Tips"},{"location":"pages/qa-automations/qa_automations_selenium_python/#06-tutorials-and-useful-links","text":"https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"06. Tutorials and useful links"},{"location":"pages/qa-automations/qa_automations_selenium_python_seleniumbase/","text":"QA Automation Framework Setup Python + SeleniumBase Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm 01. Installation steps Create a new project in PyCharm Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/PycharmProjects/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Setup Virtual Environment within Pycharm Install Python Install SeleniumBaseIO (https://seleniumbase.io/) Open terminal and type: pip3 install seleniumbase seleniumbase (or sbase) (to check if the installation is passed) Install ChromeDriver Open terminal and type: sbase install chromedriver latest, or sbase install chromedriver 97.0.4692.71 02. SeleniumBase commands Run all tests: pytest Run specific testcase and generate html report: pytest -k test_home 03. Brief details about the files and folders pythonSeleniumBase (root folder) custom_screenshots (This folder contains screenshots) data (This folder contains data: .png, .jpeg...) latest_logs (This folder contains: test_info.txt, page_source_info.html, and screenshot.png) page_objects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) tests (This Python Package folder contains automation test script) venvs (This folder contains all dependencies in our virtual environment) report.html (This file is report) requirements.txt (This file represent all dependencies we use) 04. Tutorials and useful links https://www.youtube.com/watch?v=D0-QGMacMxA&list=PLGLlPuoTA3DURLLEpkJJmN7wXgGztfIo3&index=5&ab_channel=AutomationBro-DilpreetJohal","title":"Selenium (Python-SeleniumBase)"},{"location":"pages/qa-automations/qa_automations_selenium_python_seleniumbase/#qa-automation-framework-setup","text":"","title":"QA Automation Framework Setup"},{"location":"pages/qa-automations/qa_automations_selenium_python_seleniumbase/#python-seleniumbase","text":"Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm","title":"Python + SeleniumBase"},{"location":"pages/qa-automations/qa_automations_selenium_python_seleniumbase/#01-installation-steps","text":"Create a new project in PyCharm Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/PycharmProjects/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Setup Virtual Environment within Pycharm Install Python Install SeleniumBaseIO (https://seleniumbase.io/) Open terminal and type: pip3 install seleniumbase seleniumbase (or sbase) (to check if the installation is passed) Install ChromeDriver Open terminal and type: sbase install chromedriver latest, or sbase install chromedriver 97.0.4692.71","title":"01. Installation steps"},{"location":"pages/qa-automations/qa_automations_selenium_python_seleniumbase/#02-seleniumbase-commands","text":"Run all tests: pytest Run specific testcase and generate html report: pytest -k test_home","title":"02. SeleniumBase commands"},{"location":"pages/qa-automations/qa_automations_selenium_python_seleniumbase/#03-brief-details-about-the-files-and-folders","text":"pythonSeleniumBase (root folder) custom_screenshots (This folder contains screenshots) data (This folder contains data: .png, .jpeg...) latest_logs (This folder contains: test_info.txt, page_source_info.html, and screenshot.png) page_objects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) tests (This Python Package folder contains automation test script) venvs (This folder contains all dependencies in our virtual environment) report.html (This file is report) requirements.txt (This file represent all dependencies we use)","title":"03. Brief details about the files and folders"},{"location":"pages/qa-automations/qa_automations_selenium_python_seleniumbase/#04-tutorials-and-useful-links","text":"https://www.youtube.com/watch?v=D0-QGMacMxA&list=PLGLlPuoTA3DURLLEpkJJmN7wXgGztfIo3&index=5&ab_channel=AutomationBro-DilpreetJohal","title":"04. Tutorials and useful links"},{"location":"fr/","text":"Welcome to Furman QA Docs For full documentation visit mkdocs.org . Subscribe to our newsletter First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"About"},{"location":"fr/#welcome-to-furman-qa-docs","text":"For full documentation visit mkdocs.org . Subscribe to our newsletter First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell","title":"Welcome to Furman QA Docs"},{"location":"fr/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"fr/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"fr/pages/about/","text":"","title":"About"},{"location":"fr/pages/faq/","text":"","title":"Faq"},{"location":"fr/pages/qa-automations/qa_automations_cypress_javascript/","text":"QA Automaton Framework Setup Cypress This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Install git (Version Control System) Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install VSCode (Integrated Development Environment) 01. Installation Steps Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Create a new project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Type and follow instructions: npm init Install Cypress: npm install cypress --save-dev (Latest version) npm install cypress@6.8.0 --save-dev npm install cypress@6.9.1 --save-dev npm install cypress@7.7.0 --save-dev Start Cypress Test Runner (type in CMD or VSCode terminal): node_modules.bin\\cypress open (Run in background) node_modules.bin\\cypress open \u2014headed (Run in UI) Clone project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Clone application under test Type the following commands: git clone https://github.com/filiphric/cypress-tau-course.git npm install (install all dependencies) npm start (in browser type: http://localhost:4200/) Clone application outside test Type the following commands: git clone https://git.nosolutions.rs/vladan.furman/dating.git npm install (install all dependencies) npm start (in browser: http://localhost:4200/) 02. Brief details about the files and folders project_name/dating (root) cypress fixtures (This folder contains CSV, HTML, or JSON files) example.json example.csv integrations (This folder provides a place that writes out test cases) 01_SD_Smoke_Tests 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_SD_Regression_Tests 01_landing_page 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_signup 02_01_test_signup_form_eng.spec.js 02_02_test_signup_form_ger.spec.js 03_registration 03_01_test_signup_form_eng.spec.js 03_02_test_signup_form_ger.spec.js 04_login 04_01_test_login_eng.spec.js 04_02_test_login_ger.spec.js plugins (This folder contains the plugins or listeners) index.js reports (This folder contains html reports runnable within your browser) mocha mochareports support (Writes customized commands or reusable methods that are available for usage in all of your spec/test files.) page_objects helpers.js (Functions or actions. E.g. delete all photos, select language, api - post actions, api - setup default state) navigations.js (Functions or actions. E.g. navigate to log in, navigate to profile menu, navigate to search tab) login.js (Functions or actions. E.g. login different users) commands.js (This file contains commands for starting different environment and to store .json file from fixture folder before test start) Cypress.Commands.add('openApplication') cy.visit('Cypress.env(url)') cy.fixture('users') index.js (This file is processed and loaded automatically before your test files. Global configuration. Behavior that modifies Cypress) import './commands' (This is by default) videos (This folder contains videos that will be saved after test execution) 01_SD_Smoke_Tests 02_SD_Regression_Tests node_modules (This is the folder where NPM installs all the project dependencies.) cypress.env.json (This file contains different development stages) \u201cdevUrl\u201d: https://develop.xxxxx.date \u201cstageUrl\u201d: https://staging.xxxxx.date cypress.json (This file contains different Cypress configurations options. E.g., timeout, base URL, test files, or any other configuration.) \"chromeWebSecurity\": false \"defaultCommandTimeout\": 15000 \"requestTimeout\": 15000 \"screenshotsFolder\": \"cypress/reports/mochareports/assets\" ... e2e-run-tests.js (This file contains run commands) cypress.run (spec: \"test.spec.js\") package.json (This file contains scripts, and dependencies used in our scripts) scripts: (We use these commands to run scripts from the terminal or commander) \u201ccypress:open\u201d: \u201cnode_modules\\.bin\\cypress open\u201d \u201ccypress:run\u201d: \u201ccypress run \u2014headless \u2014browser chrome\u201d devDependencies: cypress: 6.9.1 cypress-file-upload: 5.0.6 cypress-iframe: 1.0.1 cypress-multi-reporters: 1.5.0 cypress-wait-until: 1.7.1 cy-mobile-commands: 0.2.1 mocha: 8.3.2 mochawesome: 6.2.2 mochawesome-merge: 4.2.0 mochawesome-report-generator: 5.2.0 moment: 2.29.1 package-lock.json Additional Details: Fixtures are external pieces of static data that can be used by your tests. We should not hard code data in the test case. It should drive from an external source like CSV, HTML, or JSON. They will be majorly used with the cy.fixture() command when you need to stub the network calls. Integration folder provides a place that writes out test cases. It also provides an \u201cexamples\u201d directory, which contains the default test cases provided by Cypress and can be used to add new test cases also. We can also create our folder under the integration directory and add out test cases under that. Plugins contain the plugins or listeners. By default, Cypress will automatically include the plugins file \u201ccypress/plugins/index.js\u201d before every test it runs. You can programmatically alter the resolved configuration and environment variables using plugins, Eg. If we have to inject customized options to browsers like accepting the certificate, or do any activity on test case pass or fail or to handle any other events like handling screenshots. They enable you to extend or modify the existing behavior of Cypress. Support writes customized commands or reusable methods that are available for usage in all of your spec/test files. This file runs before every single spec file. That\u2019s why you don\u2019t have to import this file in every single one of your spec files. The \u201csupport\u201d file is a great place to put reusable behavior such as Custom Commands or global overrides that you want to be applied and available to all of your spec files. Node_Modules in the default project structure is the heart of the cypress project. All the node packages will be installed in the node_modules directory and will be available in all the test files. So, in a nutshell, this is the folder where NPM installs all the project dependencies. Cypress.json is used to store different configurations. E.g., timeout, base URL, test files, or any other configuration that we want to override for tweaking the behavior of Cypress. We can also manage the customized folder structure because it is part of by default Cypress Configurations. 03. Basic Cypress Actions Navigate to the web page you want to test (cy.visit) Locate the element of the web page you want to test and perform action (cy.get('button').click()) Run script from Cypress runner Run script with command from terminal and generate report and logs (node_modules.bin\\cypress run --spec \"cypress\\integration\\examples\\firsttest.js\") Navigate to report\\mochareports\\report.html 04. Tips Organize your tests - separate and categorize them Create folders to more accurately categorize files Split tests by category, e.g. in the 'user' folder put tests for login and registration, and in the 'shopping' folder - tests for the buying process. Write independent tests You should be able to choose any test or run several tests in any order and still get the same result. Set base URL Instead of repeating the lines with web addresses in each test, set the base URL in the 'cypress.json' file. Run tests, that are crucial at the moment - use \u2018cy.only\u2019 and \u2018cy.skip\u2019 Use your own custom commands Add your command to the 'commands.js' file Use the best selectors (CSS, By ID, By ClassName) Add assertions - to be sure that you are referring to the right element at the right time instead of wait(500). should('contain.text', 'Login') should('be.visible') 05. Tutorials and Useful Links https://docs.cypress.io/ https://www.udemy.com/course/cypress-web-automation-testing-from-zero-to-hero/ https://www.youtube.com/watch?v=gUFdU5fQs4o&list=PLSRQwlkmpdj6K7pwZmu9v5icbhAiGlQln&ab_channel=Cypress.io https://www.youtube.com/watch?v=avb-VDa3ZG4&t=2637s&ab_channel=LaithHarb https://www.youtube.com/watch?v=CYcdT-tOvB0&list=PLhW3qG5bs-L9LTfxZ5LEBiM1WFfvX3dJo&ab_channel=AutomationStepbyStep https://www.diogonunes.com/blog/cypress-tips-tricks/","title":"Cypress (Javascript)"},{"location":"fr/pages/qa-automations/qa_automations_cypress_javascript/#qa-automaton-framework-setup","text":"","title":"QA Automaton Framework Setup"},{"location":"fr/pages/qa-automations/qa_automations_cypress_javascript/#cypress","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Install git (Version Control System) Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install VSCode (Integrated Development Environment)","title":"Cypress"},{"location":"fr/pages/qa-automations/qa_automations_cypress_javascript/#01-installation-steps","text":"Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Create a new project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Type and follow instructions: npm init Install Cypress: npm install cypress --save-dev (Latest version) npm install cypress@6.8.0 --save-dev npm install cypress@6.9.1 --save-dev npm install cypress@7.7.0 --save-dev Start Cypress Test Runner (type in CMD or VSCode terminal): node_modules.bin\\cypress open (Run in background) node_modules.bin\\cypress open \u2014headed (Run in UI) Clone project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Clone application under test Type the following commands: git clone https://github.com/filiphric/cypress-tau-course.git npm install (install all dependencies) npm start (in browser type: http://localhost:4200/) Clone application outside test Type the following commands: git clone https://git.nosolutions.rs/vladan.furman/dating.git npm install (install all dependencies) npm start (in browser: http://localhost:4200/)","title":"01. Installation Steps"},{"location":"fr/pages/qa-automations/qa_automations_cypress_javascript/#02-brief-details-about-the-files-and-folders","text":"project_name/dating (root) cypress fixtures (This folder contains CSV, HTML, or JSON files) example.json example.csv integrations (This folder provides a place that writes out test cases) 01_SD_Smoke_Tests 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_SD_Regression_Tests 01_landing_page 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_signup 02_01_test_signup_form_eng.spec.js 02_02_test_signup_form_ger.spec.js 03_registration 03_01_test_signup_form_eng.spec.js 03_02_test_signup_form_ger.spec.js 04_login 04_01_test_login_eng.spec.js 04_02_test_login_ger.spec.js plugins (This folder contains the plugins or listeners) index.js reports (This folder contains html reports runnable within your browser) mocha mochareports support (Writes customized commands or reusable methods that are available for usage in all of your spec/test files.) page_objects helpers.js (Functions or actions. E.g. delete all photos, select language, api - post actions, api - setup default state) navigations.js (Functions or actions. E.g. navigate to log in, navigate to profile menu, navigate to search tab) login.js (Functions or actions. E.g. login different users) commands.js (This file contains commands for starting different environment and to store .json file from fixture folder before test start) Cypress.Commands.add('openApplication') cy.visit('Cypress.env(url)') cy.fixture('users') index.js (This file is processed and loaded automatically before your test files. Global configuration. Behavior that modifies Cypress) import './commands' (This is by default) videos (This folder contains videos that will be saved after test execution) 01_SD_Smoke_Tests 02_SD_Regression_Tests node_modules (This is the folder where NPM installs all the project dependencies.) cypress.env.json (This file contains different development stages) \u201cdevUrl\u201d: https://develop.xxxxx.date \u201cstageUrl\u201d: https://staging.xxxxx.date cypress.json (This file contains different Cypress configurations options. E.g., timeout, base URL, test files, or any other configuration.) \"chromeWebSecurity\": false \"defaultCommandTimeout\": 15000 \"requestTimeout\": 15000 \"screenshotsFolder\": \"cypress/reports/mochareports/assets\" ... e2e-run-tests.js (This file contains run commands) cypress.run (spec: \"test.spec.js\") package.json (This file contains scripts, and dependencies used in our scripts) scripts: (We use these commands to run scripts from the terminal or commander) \u201ccypress:open\u201d: \u201cnode_modules\\.bin\\cypress open\u201d \u201ccypress:run\u201d: \u201ccypress run \u2014headless \u2014browser chrome\u201d devDependencies: cypress: 6.9.1 cypress-file-upload: 5.0.6 cypress-iframe: 1.0.1 cypress-multi-reporters: 1.5.0 cypress-wait-until: 1.7.1 cy-mobile-commands: 0.2.1 mocha: 8.3.2 mochawesome: 6.2.2 mochawesome-merge: 4.2.0 mochawesome-report-generator: 5.2.0 moment: 2.29.1 package-lock.json","title":"02. Brief details about the files and folders"},{"location":"fr/pages/qa-automations/qa_automations_cypress_javascript/#additional-details","text":"Fixtures are external pieces of static data that can be used by your tests. We should not hard code data in the test case. It should drive from an external source like CSV, HTML, or JSON. They will be majorly used with the cy.fixture() command when you need to stub the network calls. Integration folder provides a place that writes out test cases. It also provides an \u201cexamples\u201d directory, which contains the default test cases provided by Cypress and can be used to add new test cases also. We can also create our folder under the integration directory and add out test cases under that. Plugins contain the plugins or listeners. By default, Cypress will automatically include the plugins file \u201ccypress/plugins/index.js\u201d before every test it runs. You can programmatically alter the resolved configuration and environment variables using plugins, Eg. If we have to inject customized options to browsers like accepting the certificate, or do any activity on test case pass or fail or to handle any other events like handling screenshots. They enable you to extend or modify the existing behavior of Cypress. Support writes customized commands or reusable methods that are available for usage in all of your spec/test files. This file runs before every single spec file. That\u2019s why you don\u2019t have to import this file in every single one of your spec files. The \u201csupport\u201d file is a great place to put reusable behavior such as Custom Commands or global overrides that you want to be applied and available to all of your spec files. Node_Modules in the default project structure is the heart of the cypress project. All the node packages will be installed in the node_modules directory and will be available in all the test files. So, in a nutshell, this is the folder where NPM installs all the project dependencies. Cypress.json is used to store different configurations. E.g., timeout, base URL, test files, or any other configuration that we want to override for tweaking the behavior of Cypress. We can also manage the customized folder structure because it is part of by default Cypress Configurations.","title":"Additional Details:"},{"location":"fr/pages/qa-automations/qa_automations_cypress_javascript/#03-basic-cypress-actions","text":"Navigate to the web page you want to test (cy.visit) Locate the element of the web page you want to test and perform action (cy.get('button').click()) Run script from Cypress runner Run script with command from terminal and generate report and logs (node_modules.bin\\cypress run --spec \"cypress\\integration\\examples\\firsttest.js\") Navigate to report\\mochareports\\report.html","title":"03. Basic Cypress Actions"},{"location":"fr/pages/qa-automations/qa_automations_cypress_javascript/#04-tips","text":"Organize your tests - separate and categorize them Create folders to more accurately categorize files Split tests by category, e.g. in the 'user' folder put tests for login and registration, and in the 'shopping' folder - tests for the buying process. Write independent tests You should be able to choose any test or run several tests in any order and still get the same result. Set base URL Instead of repeating the lines with web addresses in each test, set the base URL in the 'cypress.json' file. Run tests, that are crucial at the moment - use \u2018cy.only\u2019 and \u2018cy.skip\u2019 Use your own custom commands Add your command to the 'commands.js' file Use the best selectors (CSS, By ID, By ClassName) Add assertions - to be sure that you are referring to the right element at the right time instead of wait(500). should('contain.text', 'Login') should('be.visible')","title":"04. Tips"},{"location":"fr/pages/qa-automations/qa_automations_cypress_javascript/#05-tutorials-and-useful-links","text":"https://docs.cypress.io/ https://www.udemy.com/course/cypress-web-automation-testing-from-zero-to-hero/ https://www.youtube.com/watch?v=gUFdU5fQs4o&list=PLSRQwlkmpdj6K7pwZmu9v5icbhAiGlQln&ab_channel=Cypress.io https://www.youtube.com/watch?v=avb-VDa3ZG4&t=2637s&ab_channel=LaithHarb https://www.youtube.com/watch?v=CYcdT-tOvB0&list=PLhW3qG5bs-L9LTfxZ5LEBiM1WFfvX3dJo&ab_channel=AutomationStepbyStep https://www.diogonunes.com/blog/cypress-tips-tricks/","title":"05. Tutorials and Useful Links"},{"location":"fr/pages/qa-automations/qa_automations_selenium_java/","text":"QA Automation Framework Setup Java + Selenium + Cucumber + TestProjectIO This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Must have account on Test Project cloud platform: TestProjectIO Run: TestProject Agent on your PC (If using TestProjectIO SDK instead of chromedriver) Install IntelliJ IDEACommunity Edition 01. Installation steps Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Download Maven (zip) Create folder (C:\\Program Files\\apache-maven-3.6.3), copy and unzip maven file. Setup environment variables for Maven: System Properties\\Advanced\\Environment Variables: MAVEN_HOME (C:\\Program Files\\apache-maven-3.6.3) Install NodeJS 14.17.6 System Properties\\Advanced\\Environment Variables\\Path: Within the Path set environment variable: %JAVA_HOME%\\bin %MAVEN_HOME%\\binF Download Chromedriver Download Selenium Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/Selenium/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Open project with IntelliJ Idea Run first test with Maven Optional: Download and install TestProjectIO Run TestProjectIO Agent Setup TestProjectIO Java SDK 02. Brief details about the files and folders project_name/sauce-demo Resources (This folder contains drivers etc chromedriver, geckodriver...) src/main/java/com.bwl/ (package folder) BaseClass.java (setDriver, driverQuit) LoginPage.java (waitForLogoPresence, clickOnLoginButton) test/java/com.bwl/ (package folder) StepDefinitions/ (package folder) Initialize.java (Before - setDriver, After - driverQuit) LoginStepDefinitions.java (Given, Then, When...) TestRunner (RunWith - CucumberOptions) test/resources features LoginUser.feature (Cucumber Features and Scenarios: Given, Then, When, Examples ) cucumber.properties target classes cucumber-reports generated-sources generated-test-sources test-classes pom.xml (This file contains all dependencies and plugins) 03. Dependencies list (pom.xml) build plugins plugin: - groupId: org.apache.maven.plugins - artifactId: maven-surefire-plugin - version: 3.0.0-M5 - configuration: - suiteXmlFile: testng.xml - groupId: net.masterhought - artifactId: maven-cucumber-reporting - version: 5.3.0 dependencies dependency: - groupId: io.testproject - artifactId: java-sdk - version: 1.2.3.-RELEASE - groupId: org.seleniumhq.selenium - artifactId: selenium-java - version: 3.141.59 - groupId: org.testng - artifactId: testng - version: 7.3.0 - groupId: io.cucumber - artifactId: cucumber-java - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-testng - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-core - version: 6.7.0 - groupId: org.junit.jupiter - artifactId: junit-jupiter-api - version: 5.5.2 - groupId: io.cucumber - artifactId: cucumber-junit - version: 6.11.0 properties - maven.compiler.source: 11 - maven.compiler.target: 11 04. Basic selenium actions Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test 05. Tips Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements inside of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements. 06. Tutorials and useful links https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"Selenium (Java)"},{"location":"fr/pages/qa-automations/qa_automations_selenium_java/#qa-automation-framework-setup","text":"","title":"QA Automation Framework Setup"},{"location":"fr/pages/qa-automations/qa_automations_selenium_java/#java-selenium-cucumber-testprojectio","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Must have account on Test Project cloud platform: TestProjectIO Run: TestProject Agent on your PC (If using TestProjectIO SDK instead of chromedriver) Install IntelliJ IDEACommunity Edition","title":"Java + Selenium + Cucumber + TestProjectIO"},{"location":"fr/pages/qa-automations/qa_automations_selenium_java/#01-installation-steps","text":"Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Download Maven (zip) Create folder (C:\\Program Files\\apache-maven-3.6.3), copy and unzip maven file. Setup environment variables for Maven: System Properties\\Advanced\\Environment Variables: MAVEN_HOME (C:\\Program Files\\apache-maven-3.6.3) Install NodeJS 14.17.6 System Properties\\Advanced\\Environment Variables\\Path: Within the Path set environment variable: %JAVA_HOME%\\bin %MAVEN_HOME%\\binF Download Chromedriver Download Selenium Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/Selenium/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Open project with IntelliJ Idea Run first test with Maven Optional: Download and install TestProjectIO Run TestProjectIO Agent Setup TestProjectIO Java SDK","title":"01. Installation steps"},{"location":"fr/pages/qa-automations/qa_automations_selenium_java/#02-brief-details-about-the-files-and-folders","text":"project_name/sauce-demo Resources (This folder contains drivers etc chromedriver, geckodriver...) src/main/java/com.bwl/ (package folder) BaseClass.java (setDriver, driverQuit) LoginPage.java (waitForLogoPresence, clickOnLoginButton) test/java/com.bwl/ (package folder) StepDefinitions/ (package folder) Initialize.java (Before - setDriver, After - driverQuit) LoginStepDefinitions.java (Given, Then, When...) TestRunner (RunWith - CucumberOptions) test/resources features LoginUser.feature (Cucumber Features and Scenarios: Given, Then, When, Examples ) cucumber.properties target classes cucumber-reports generated-sources generated-test-sources test-classes pom.xml (This file contains all dependencies and plugins)","title":"02. Brief details about the files and folders"},{"location":"fr/pages/qa-automations/qa_automations_selenium_java/#03-dependencies-list-pomxml","text":"build plugins plugin: - groupId: org.apache.maven.plugins - artifactId: maven-surefire-plugin - version: 3.0.0-M5 - configuration: - suiteXmlFile: testng.xml - groupId: net.masterhought - artifactId: maven-cucumber-reporting - version: 5.3.0 dependencies dependency: - groupId: io.testproject - artifactId: java-sdk - version: 1.2.3.-RELEASE - groupId: org.seleniumhq.selenium - artifactId: selenium-java - version: 3.141.59 - groupId: org.testng - artifactId: testng - version: 7.3.0 - groupId: io.cucumber - artifactId: cucumber-java - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-testng - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-core - version: 6.7.0 - groupId: org.junit.jupiter - artifactId: junit-jupiter-api - version: 5.5.2 - groupId: io.cucumber - artifactId: cucumber-junit - version: 6.11.0 properties - maven.compiler.source: 11 - maven.compiler.target: 11","title":"03. Dependencies list (pom.xml)"},{"location":"fr/pages/qa-automations/qa_automations_selenium_java/#04-basic-selenium-actions","text":"Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test","title":"04. Basic selenium actions"},{"location":"fr/pages/qa-automations/qa_automations_selenium_java/#05-tips","text":"Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements inside of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements.","title":"05. Tips"},{"location":"fr/pages/qa-automations/qa_automations_selenium_java/#06-tutorials-and-useful-links","text":"https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"06. Tutorials and useful links"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python/","text":"QA Automation Framework Setup Python + Selenium + HTML Report Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm 01. Installation steps Please do the following steps to set up the framework: Clone the repo & create the virtual env Clone the automations repo: git clone \"file\" Create a virtual env: python -m virtualenv venvs\\automations Activate the virtualenv: . .\\venvs\\automations\\bin\\activate Install dependencies (this can be done from pycharm): selenium==3.14.1 requests==2.23.0 pytest==6.0.1 pytest-html==2.0.1 pytest-xdist==2.5.0 openpyxl==3.0.9 pytest-metadata==1.10.0 PyYAML==5.3.1 c- lang==4.0.post1 urllib3==1.25.10 allure-pytest==2.8.40 stripe==2.37.2 pytz==2020.1 pytest-services==2.2.1 Install Chromedriver Make sure your version of Chrome is up to date, and install the latest Chromedriver for your version from https://chromedriver.chromium.org/. Unzip and copy Chromedriver or Geckodriver to: /Users/username/PycharmProjects/pytestSelenium_project/venv/bin/chromedriver Setup virtual environment: Install test requirements (from ~/projects/automations/): pip install -r test-requirements.txt 02. Brief details about the files and folders - pytestSelenium_project: - directory name: Logs - description: used for execution log files - python package: pageObjects/ - directory name: folder/ - description: this folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page. - directory name: Reports - description: this folder contains .html file - directory name: Screenshot - description: saved screenshot for specific scenario - directory name: TestData - description: .xml files - python package: tests/ - directory name: conf/ - file: confing.ini - description: this file is common file and contains common fixtures related to test scripts. - python package: tests/ - directory name: test_scripts/*.py - description: these are our actual automation test script. - python package: utilities/ - file: readProerties.py - description: this file contains common utility functions. - directory name: venv 03. Pytest commands - Run specific testcase: - pytest -v -s tests/test_scripts/test_login.py - Run specific testcase and create html report: - pytest -v -s \u2013html=Reports\\report.html tests/test_scripts/test_login.py 04. Basic selenium actions Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test 05. Tips Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements within of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements. 06. Tutorials and useful links https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"Selenium (Python)"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python/#qa-automation-framework-setup","text":"","title":"QA Automation Framework Setup"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python/#python-selenium-html-report","text":"Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm","title":"Python + Selenium + HTML Report"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python/#01-installation-steps","text":"Please do the following steps to set up the framework: Clone the repo & create the virtual env Clone the automations repo: git clone \"file\" Create a virtual env: python -m virtualenv venvs\\automations Activate the virtualenv: . .\\venvs\\automations\\bin\\activate Install dependencies (this can be done from pycharm): selenium==3.14.1 requests==2.23.0 pytest==6.0.1 pytest-html==2.0.1 pytest-xdist==2.5.0 openpyxl==3.0.9 pytest-metadata==1.10.0 PyYAML==5.3.1 c- lang==4.0.post1 urllib3==1.25.10 allure-pytest==2.8.40 stripe==2.37.2 pytz==2020.1 pytest-services==2.2.1 Install Chromedriver Make sure your version of Chrome is up to date, and install the latest Chromedriver for your version from https://chromedriver.chromium.org/. Unzip and copy Chromedriver or Geckodriver to: /Users/username/PycharmProjects/pytestSelenium_project/venv/bin/chromedriver Setup virtual environment: Install test requirements (from ~/projects/automations/): pip install -r test-requirements.txt","title":"01. Installation steps"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python/#02-brief-details-about-the-files-and-folders","text":"- pytestSelenium_project: - directory name: Logs - description: used for execution log files - python package: pageObjects/ - directory name: folder/ - description: this folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page. - directory name: Reports - description: this folder contains .html file - directory name: Screenshot - description: saved screenshot for specific scenario - directory name: TestData - description: .xml files - python package: tests/ - directory name: conf/ - file: confing.ini - description: this file is common file and contains common fixtures related to test scripts. - python package: tests/ - directory name: test_scripts/*.py - description: these are our actual automation test script. - python package: utilities/ - file: readProerties.py - description: this file contains common utility functions. - directory name: venv","title":"02. Brief details about the files and folders"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python/#03-pytest-commands","text":"- Run specific testcase: - pytest -v -s tests/test_scripts/test_login.py - Run specific testcase and create html report: - pytest -v -s \u2013html=Reports\\report.html tests/test_scripts/test_login.py","title":"03. Pytest commands"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python/#04-basic-selenium-actions","text":"Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test","title":"04. Basic selenium actions"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python/#05-tips","text":"Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements within of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements.","title":"05. Tips"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python/#06-tutorials-and-useful-links","text":"https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"06. Tutorials and useful links"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python_seleniumbase/","text":"QA Automation Framework Setup Python + SeleniumBase Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm 01. Installation steps Create a new project in PyCharm Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/PycharmProjects/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Setup Virtual Environment within Pycharm Install Python Install SeleniumBaseIO (https://seleniumbase.io/) Open terminal and type: pip3 install seleniumbase seleniumbase (or sbase) (to check if the installation is passed) Install ChromeDriver Open terminal and type: sbase install chromedriver latest, or sbase install chromedriver 97.0.4692.71 02. SeleniumBase commands Run all tests: pytest Run specific testcase and generate html report: pytest -k test_home 03. Brief details about the files and folders pythonSeleniumBase (root folder) custom_screenshots (This folder contains screenshots) data (This folder contains data: .png, .jpeg...) latest_logs (This folder contains: test_info.txt, page_source_info.html, and screenshot.png) page_objects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) tests (This Python Package folder contains automation test script) venvs (This folder contains all dependencies in our virtual environment) report.html (This file is report) requirements.txt (This file represent all dependencies we use) 04. Tutorials and useful links https://www.youtube.com/watch?v=D0-QGMacMxA&list=PLGLlPuoTA3DURLLEpkJJmN7wXgGztfIo3&index=5&ab_channel=AutomationBro-DilpreetJohal","title":"Selenium (Python-SeleniumBase)"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#qa-automation-framework-setup","text":"","title":"QA Automation Framework Setup"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#python-seleniumbase","text":"Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm","title":"Python + SeleniumBase"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#01-installation-steps","text":"Create a new project in PyCharm Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/PycharmProjects/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Setup Virtual Environment within Pycharm Install Python Install SeleniumBaseIO (https://seleniumbase.io/) Open terminal and type: pip3 install seleniumbase seleniumbase (or sbase) (to check if the installation is passed) Install ChromeDriver Open terminal and type: sbase install chromedriver latest, or sbase install chromedriver 97.0.4692.71","title":"01. Installation steps"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#02-seleniumbase-commands","text":"Run all tests: pytest Run specific testcase and generate html report: pytest -k test_home","title":"02. SeleniumBase commands"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#03-brief-details-about-the-files-and-folders","text":"pythonSeleniumBase (root folder) custom_screenshots (This folder contains screenshots) data (This folder contains data: .png, .jpeg...) latest_logs (This folder contains: test_info.txt, page_source_info.html, and screenshot.png) page_objects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) tests (This Python Package folder contains automation test script) venvs (This folder contains all dependencies in our virtual environment) report.html (This file is report) requirements.txt (This file represent all dependencies we use)","title":"03. Brief details about the files and folders"},{"location":"fr/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#04-tutorials-and-useful-links","text":"https://www.youtube.com/watch?v=D0-QGMacMxA&list=PLGLlPuoTA3DURLLEpkJJmN7wXgGztfIo3&index=5&ab_channel=AutomationBro-DilpreetJohal","title":"04. Tutorials and useful links"},{"location":"de/","text":"Welcome to Furman QA Docs For full documentation visit mkdocs.org . Subscribe to our newsletter First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"About"},{"location":"de/#welcome-to-furman-qa-docs","text":"For full documentation visit mkdocs.org . Subscribe to our newsletter First Header Second Header Third Header Content Cell Content Cell Content Cell Content Cell Content Cell Content Cell","title":"Welcome to Furman QA Docs"},{"location":"de/#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"de/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"de/pages/about/","text":"","title":"About"},{"location":"de/pages/faq/","text":"","title":"Faq"},{"location":"de/pages/qa-automations/qa_automations_cypress_javascript/","text":"QA Automaton Framework Setup Cypress This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Install git (Version Control System) Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install VSCode (Integrated Development Environment) 01. Installation Steps Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Create a new project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Type and follow instructions: npm init Install Cypress: npm install cypress --save-dev (Latest version) npm install cypress@6.8.0 --save-dev npm install cypress@6.9.1 --save-dev npm install cypress@7.7.0 --save-dev Start Cypress Test Runner (type in CMD or VSCode terminal): node_modules.bin\\cypress open (Run in background) node_modules.bin\\cypress open \u2014headed (Run in UI) Clone project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Clone application under test Type the following commands: git clone https://github.com/filiphric/cypress-tau-course.git npm install (install all dependencies) npm start (in browser type: http://localhost:4200/) Clone application outside test Type the following commands: git clone https://git.nosolutions.rs/vladan.furman/dating.git npm install (install all dependencies) npm start (in browser: http://localhost:4200/) 02. Brief details about the files and folders project_name/dating (root) cypress fixtures (This folder contains CSV, HTML, or JSON files) example.json example.csv integrations (This folder provides a place that writes out test cases) 01_SD_Smoke_Tests 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_SD_Regression_Tests 01_landing_page 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_signup 02_01_test_signup_form_eng.spec.js 02_02_test_signup_form_ger.spec.js 03_registration 03_01_test_signup_form_eng.spec.js 03_02_test_signup_form_ger.spec.js 04_login 04_01_test_login_eng.spec.js 04_02_test_login_ger.spec.js plugins (This folder contains the plugins or listeners) index.js reports (This folder contains html reports runnable within your browser) mocha mochareports support (Writes customized commands or reusable methods that are available for usage in all of your spec/test files.) page_objects helpers.js (Functions or actions. E.g. delete all photos, select language, api - post actions, api - setup default state) navigations.js (Functions or actions. E.g. navigate to log in, navigate to profile menu, navigate to search tab) login.js (Functions or actions. E.g. login different users) commands.js (This file contains commands for starting different environment and to store .json file from fixture folder before test start) Cypress.Commands.add('openApplication') cy.visit('Cypress.env(url)') cy.fixture('users') index.js (This file is processed and loaded automatically before your test files. Global configuration. Behavior that modifies Cypress) import './commands' (This is by default) videos (This folder contains videos that will be saved after test execution) 01_SD_Smoke_Tests 02_SD_Regression_Tests node_modules (This is the folder where NPM installs all the project dependencies.) cypress.env.json (This file contains different development stages) \u201cdevUrl\u201d: https://develop.xxxxx.date \u201cstageUrl\u201d: https://staging.xxxxx.date cypress.json (This file contains different Cypress configurations options. E.g., timeout, base URL, test files, or any other configuration.) \"chromeWebSecurity\": false \"defaultCommandTimeout\": 15000 \"requestTimeout\": 15000 \"screenshotsFolder\": \"cypress/reports/mochareports/assets\" ... e2e-run-tests.js (This file contains run commands) cypress.run (spec: \"test.spec.js\") package.json (This file contains scripts, and dependencies used in our scripts) scripts: (We use these commands to run scripts from the terminal or commander) \u201ccypress:open\u201d: \u201cnode_modules\\.bin\\cypress open\u201d \u201ccypress:run\u201d: \u201ccypress run \u2014headless \u2014browser chrome\u201d devDependencies: cypress: 6.9.1 cypress-file-upload: 5.0.6 cypress-iframe: 1.0.1 cypress-multi-reporters: 1.5.0 cypress-wait-until: 1.7.1 cy-mobile-commands: 0.2.1 mocha: 8.3.2 mochawesome: 6.2.2 mochawesome-merge: 4.2.0 mochawesome-report-generator: 5.2.0 moment: 2.29.1 package-lock.json Additional Details: Fixtures are external pieces of static data that can be used by your tests. We should not hard code data in the test case. It should drive from an external source like CSV, HTML, or JSON. They will be majorly used with the cy.fixture() command when you need to stub the network calls. Integration folder provides a place that writes out test cases. It also provides an \u201cexamples\u201d directory, which contains the default test cases provided by Cypress and can be used to add new test cases also. We can also create our folder under the integration directory and add out test cases under that. Plugins contain the plugins or listeners. By default, Cypress will automatically include the plugins file \u201ccypress/plugins/index.js\u201d before every test it runs. You can programmatically alter the resolved configuration and environment variables using plugins, Eg. If we have to inject customized options to browsers like accepting the certificate, or do any activity on test case pass or fail or to handle any other events like handling screenshots. They enable you to extend or modify the existing behavior of Cypress. Support writes customized commands or reusable methods that are available for usage in all of your spec/test files. This file runs before every single spec file. That\u2019s why you don\u2019t have to import this file in every single one of your spec files. The \u201csupport\u201d file is a great place to put reusable behavior such as Custom Commands or global overrides that you want to be applied and available to all of your spec files. Node_Modules in the default project structure is the heart of the cypress project. All the node packages will be installed in the node_modules directory and will be available in all the test files. So, in a nutshell, this is the folder where NPM installs all the project dependencies. Cypress.json is used to store different configurations. E.g., timeout, base URL, test files, or any other configuration that we want to override for tweaking the behavior of Cypress. We can also manage the customized folder structure because it is part of by default Cypress Configurations. 03. Basic Cypress Actions Navigate to the web page you want to test (cy.visit) Locate the element of the web page you want to test and perform action (cy.get('button').click()) Run script from Cypress runner Run script with command from terminal and generate report and logs (node_modules.bin\\cypress run --spec \"cypress\\integration\\examples\\firsttest.js\") Navigate to report\\mochareports\\report.html 04. Tips Organize your tests - separate and categorize them Create folders to more accurately categorize files Split tests by category, e.g. in the 'user' folder put tests for login and registration, and in the 'shopping' folder - tests for the buying process. Write independent tests You should be able to choose any test or run several tests in any order and still get the same result. Set base URL Instead of repeating the lines with web addresses in each test, set the base URL in the 'cypress.json' file. Run tests, that are crucial at the moment - use \u2018cy.only\u2019 and \u2018cy.skip\u2019 Use your own custom commands Add your command to the 'commands.js' file Use the best selectors (CSS, By ID, By ClassName) Add assertions - to be sure that you are referring to the right element at the right time instead of wait(500). should('contain.text', 'Login') should('be.visible') 05. Tutorials and Useful Links https://docs.cypress.io/ https://www.udemy.com/course/cypress-web-automation-testing-from-zero-to-hero/ https://www.youtube.com/watch?v=gUFdU5fQs4o&list=PLSRQwlkmpdj6K7pwZmu9v5icbhAiGlQln&ab_channel=Cypress.io https://www.youtube.com/watch?v=avb-VDa3ZG4&t=2637s&ab_channel=LaithHarb https://www.youtube.com/watch?v=CYcdT-tOvB0&list=PLhW3qG5bs-L9LTfxZ5LEBiM1WFfvX3dJo&ab_channel=AutomationStepbyStep https://www.diogonunes.com/blog/cypress-tips-tricks/","title":"Cypress (Javascript)"},{"location":"de/pages/qa-automations/qa_automations_cypress_javascript/#qa-automaton-framework-setup","text":"","title":"QA Automaton Framework Setup"},{"location":"de/pages/qa-automations/qa_automations_cypress_javascript/#cypress","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Install git (Version Control System) Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install VSCode (Integrated Development Environment)","title":"Cypress"},{"location":"de/pages/qa-automations/qa_automations_cypress_javascript/#01-installation-steps","text":"Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Create a new project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Type and follow instructions: npm init Install Cypress: npm install cypress --save-dev (Latest version) npm install cypress@6.8.0 --save-dev npm install cypress@6.9.1 --save-dev npm install cypress@7.7.0 --save-dev Start Cypress Test Runner (type in CMD or VSCode terminal): node_modules.bin\\cypress open (Run in background) node_modules.bin\\cypress open \u2014headed (Run in UI) Clone project Create working folder: C:\\Users\\user\\Documents\\TestProjects\\CypressProject Clone application under test Type the following commands: git clone https://github.com/filiphric/cypress-tau-course.git npm install (install all dependencies) npm start (in browser type: http://localhost:4200/) Clone application outside test Type the following commands: git clone https://git.nosolutions.rs/vladan.furman/dating.git npm install (install all dependencies) npm start (in browser: http://localhost:4200/)","title":"01. Installation Steps"},{"location":"de/pages/qa-automations/qa_automations_cypress_javascript/#02-brief-details-about-the-files-and-folders","text":"project_name/dating (root) cypress fixtures (This folder contains CSV, HTML, or JSON files) example.json example.csv integrations (This folder provides a place that writes out test cases) 01_SD_Smoke_Tests 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_SD_Regression_Tests 01_landing_page 01_01_test_landing_page_eng.spec.js 01_02_test_landing_page_ger.spec.js 02_signup 02_01_test_signup_form_eng.spec.js 02_02_test_signup_form_ger.spec.js 03_registration 03_01_test_signup_form_eng.spec.js 03_02_test_signup_form_ger.spec.js 04_login 04_01_test_login_eng.spec.js 04_02_test_login_ger.spec.js plugins (This folder contains the plugins or listeners) index.js reports (This folder contains html reports runnable within your browser) mocha mochareports support (Writes customized commands or reusable methods that are available for usage in all of your spec/test files.) page_objects helpers.js (Functions or actions. E.g. delete all photos, select language, api - post actions, api - setup default state) navigations.js (Functions or actions. E.g. navigate to log in, navigate to profile menu, navigate to search tab) login.js (Functions or actions. E.g. login different users) commands.js (This file contains commands for starting different environment and to store .json file from fixture folder before test start) Cypress.Commands.add('openApplication') cy.visit('Cypress.env(url)') cy.fixture('users') index.js (This file is processed and loaded automatically before your test files. Global configuration. Behavior that modifies Cypress) import './commands' (This is by default) videos (This folder contains videos that will be saved after test execution) 01_SD_Smoke_Tests 02_SD_Regression_Tests node_modules (This is the folder where NPM installs all the project dependencies.) cypress.env.json (This file contains different development stages) \u201cdevUrl\u201d: https://develop.xxxxx.date \u201cstageUrl\u201d: https://staging.xxxxx.date cypress.json (This file contains different Cypress configurations options. E.g., timeout, base URL, test files, or any other configuration.) \"chromeWebSecurity\": false \"defaultCommandTimeout\": 15000 \"requestTimeout\": 15000 \"screenshotsFolder\": \"cypress/reports/mochareports/assets\" ... e2e-run-tests.js (This file contains run commands) cypress.run (spec: \"test.spec.js\") package.json (This file contains scripts, and dependencies used in our scripts) scripts: (We use these commands to run scripts from the terminal or commander) \u201ccypress:open\u201d: \u201cnode_modules\\.bin\\cypress open\u201d \u201ccypress:run\u201d: \u201ccypress run \u2014headless \u2014browser chrome\u201d devDependencies: cypress: 6.9.1 cypress-file-upload: 5.0.6 cypress-iframe: 1.0.1 cypress-multi-reporters: 1.5.0 cypress-wait-until: 1.7.1 cy-mobile-commands: 0.2.1 mocha: 8.3.2 mochawesome: 6.2.2 mochawesome-merge: 4.2.0 mochawesome-report-generator: 5.2.0 moment: 2.29.1 package-lock.json","title":"02. Brief details about the files and folders"},{"location":"de/pages/qa-automations/qa_automations_cypress_javascript/#additional-details","text":"Fixtures are external pieces of static data that can be used by your tests. We should not hard code data in the test case. It should drive from an external source like CSV, HTML, or JSON. They will be majorly used with the cy.fixture() command when you need to stub the network calls. Integration folder provides a place that writes out test cases. It also provides an \u201cexamples\u201d directory, which contains the default test cases provided by Cypress and can be used to add new test cases also. We can also create our folder under the integration directory and add out test cases under that. Plugins contain the plugins or listeners. By default, Cypress will automatically include the plugins file \u201ccypress/plugins/index.js\u201d before every test it runs. You can programmatically alter the resolved configuration and environment variables using plugins, Eg. If we have to inject customized options to browsers like accepting the certificate, or do any activity on test case pass or fail or to handle any other events like handling screenshots. They enable you to extend or modify the existing behavior of Cypress. Support writes customized commands or reusable methods that are available for usage in all of your spec/test files. This file runs before every single spec file. That\u2019s why you don\u2019t have to import this file in every single one of your spec files. The \u201csupport\u201d file is a great place to put reusable behavior such as Custom Commands or global overrides that you want to be applied and available to all of your spec files. Node_Modules in the default project structure is the heart of the cypress project. All the node packages will be installed in the node_modules directory and will be available in all the test files. So, in a nutshell, this is the folder where NPM installs all the project dependencies. Cypress.json is used to store different configurations. E.g., timeout, base URL, test files, or any other configuration that we want to override for tweaking the behavior of Cypress. We can also manage the customized folder structure because it is part of by default Cypress Configurations.","title":"Additional Details:"},{"location":"de/pages/qa-automations/qa_automations_cypress_javascript/#03-basic-cypress-actions","text":"Navigate to the web page you want to test (cy.visit) Locate the element of the web page you want to test and perform action (cy.get('button').click()) Run script from Cypress runner Run script with command from terminal and generate report and logs (node_modules.bin\\cypress run --spec \"cypress\\integration\\examples\\firsttest.js\") Navigate to report\\mochareports\\report.html","title":"03. Basic Cypress Actions"},{"location":"de/pages/qa-automations/qa_automations_cypress_javascript/#04-tips","text":"Organize your tests - separate and categorize them Create folders to more accurately categorize files Split tests by category, e.g. in the 'user' folder put tests for login and registration, and in the 'shopping' folder - tests for the buying process. Write independent tests You should be able to choose any test or run several tests in any order and still get the same result. Set base URL Instead of repeating the lines with web addresses in each test, set the base URL in the 'cypress.json' file. Run tests, that are crucial at the moment - use \u2018cy.only\u2019 and \u2018cy.skip\u2019 Use your own custom commands Add your command to the 'commands.js' file Use the best selectors (CSS, By ID, By ClassName) Add assertions - to be sure that you are referring to the right element at the right time instead of wait(500). should('contain.text', 'Login') should('be.visible')","title":"04. Tips"},{"location":"de/pages/qa-automations/qa_automations_cypress_javascript/#05-tutorials-and-useful-links","text":"https://docs.cypress.io/ https://www.udemy.com/course/cypress-web-automation-testing-from-zero-to-hero/ https://www.youtube.com/watch?v=gUFdU5fQs4o&list=PLSRQwlkmpdj6K7pwZmu9v5icbhAiGlQln&ab_channel=Cypress.io https://www.youtube.com/watch?v=avb-VDa3ZG4&t=2637s&ab_channel=LaithHarb https://www.youtube.com/watch?v=CYcdT-tOvB0&list=PLhW3qG5bs-L9LTfxZ5LEBiM1WFfvX3dJo&ab_channel=AutomationStepbyStep https://www.diogonunes.com/blog/cypress-tips-tricks/","title":"05. Tutorials and Useful Links"},{"location":"de/pages/qa-automations/qa_automations_selenium_java/","text":"QA Automation Framework Setup Java + Selenium + Cucumber + TestProjectIO This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Must have account on Test Project cloud platform: TestProjectIO Run: TestProject Agent on your PC (If using TestProjectIO SDK instead of chromedriver) Install IntelliJ IDEACommunity Edition 01. Installation steps Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Download Maven (zip) Create folder (C:\\Program Files\\apache-maven-3.6.3), copy and unzip maven file. Setup environment variables for Maven: System Properties\\Advanced\\Environment Variables: MAVEN_HOME (C:\\Program Files\\apache-maven-3.6.3) Install NodeJS 14.17.6 System Properties\\Advanced\\Environment Variables\\Path: Within the Path set environment variable: %JAVA_HOME%\\bin %MAVEN_HOME%\\binF Download Chromedriver Download Selenium Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/Selenium/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Open project with IntelliJ Idea Run first test with Maven Optional: Download and install TestProjectIO Run TestProjectIO Agent Setup TestProjectIO Java SDK 02. Brief details about the files and folders project_name/sauce-demo Resources (This folder contains drivers etc chromedriver, geckodriver...) src/main/java/com.bwl/ (package folder) BaseClass.java (setDriver, driverQuit) LoginPage.java (waitForLogoPresence, clickOnLoginButton) test/java/com.bwl/ (package folder) StepDefinitions/ (package folder) Initialize.java (Before - setDriver, After - driverQuit) LoginStepDefinitions.java (Given, Then, When...) TestRunner (RunWith - CucumberOptions) test/resources features LoginUser.feature (Cucumber Features and Scenarios: Given, Then, When, Examples ) cucumber.properties target classes cucumber-reports generated-sources generated-test-sources test-classes pom.xml (This file contains all dependencies and plugins) 03. Dependencies list (pom.xml) build plugins plugin: - groupId: org.apache.maven.plugins - artifactId: maven-surefire-plugin - version: 3.0.0-M5 - configuration: - suiteXmlFile: testng.xml - groupId: net.masterhought - artifactId: maven-cucumber-reporting - version: 5.3.0 dependencies dependency: - groupId: io.testproject - artifactId: java-sdk - version: 1.2.3.-RELEASE - groupId: org.seleniumhq.selenium - artifactId: selenium-java - version: 3.141.59 - groupId: org.testng - artifactId: testng - version: 7.3.0 - groupId: io.cucumber - artifactId: cucumber-java - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-testng - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-core - version: 6.7.0 - groupId: org.junit.jupiter - artifactId: junit-jupiter-api - version: 5.5.2 - groupId: io.cucumber - artifactId: cucumber-junit - version: 6.11.0 properties - maven.compiler.source: 11 - maven.compiler.target: 11 04. Basic selenium actions Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test 05. Tips Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements inside of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements. 06. Tutorials and useful links https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"Selenium (Java)"},{"location":"de/pages/qa-automations/qa_automations_selenium_java/#qa-automation-framework-setup","text":"","title":"QA Automation Framework Setup"},{"location":"de/pages/qa-automations/qa_automations_selenium_java/#java-selenium-cucumber-testprojectio","text":"This document is created to enable new employees to get the basic, starting knowledge on how web automation testing works. Main task: Ensure the quality of the products that your team puts in in the hands of customers by automatig web application end users processes. Pre-Requisites: Make sure you have access to company git repository Make sure you have ssh access to your account and key is already added for account. Must have account on Test Project cloud platform: TestProjectIO Run: TestProject Agent on your PC (If using TestProjectIO SDK instead of chromedriver) Install IntelliJ IDEACommunity Edition","title":"Java + Selenium + Cucumber + TestProjectIO"},{"location":"de/pages/qa-automations/qa_automations_selenium_java/#01-installation-steps","text":"Install JDK 11 for Windows Setup environment variables for Java within your PS: Do: WIN + env + ENTER Click on: \"Environment Variables\" button in the bottom right corner on window JAVA_HOME (C:\\Program Files\\Java\\jdk-11.0.12) Download Maven (zip) Create folder (C:\\Program Files\\apache-maven-3.6.3), copy and unzip maven file. Setup environment variables for Maven: System Properties\\Advanced\\Environment Variables: MAVEN_HOME (C:\\Program Files\\apache-maven-3.6.3) Install NodeJS 14.17.6 System Properties\\Advanced\\Environment Variables\\Path: Within the Path set environment variable: %JAVA_HOME%\\bin %MAVEN_HOME%\\binF Download Chromedriver Download Selenium Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/Selenium/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Open project with IntelliJ Idea Run first test with Maven Optional: Download and install TestProjectIO Run TestProjectIO Agent Setup TestProjectIO Java SDK","title":"01. Installation steps"},{"location":"de/pages/qa-automations/qa_automations_selenium_java/#02-brief-details-about-the-files-and-folders","text":"project_name/sauce-demo Resources (This folder contains drivers etc chromedriver, geckodriver...) src/main/java/com.bwl/ (package folder) BaseClass.java (setDriver, driverQuit) LoginPage.java (waitForLogoPresence, clickOnLoginButton) test/java/com.bwl/ (package folder) StepDefinitions/ (package folder) Initialize.java (Before - setDriver, After - driverQuit) LoginStepDefinitions.java (Given, Then, When...) TestRunner (RunWith - CucumberOptions) test/resources features LoginUser.feature (Cucumber Features and Scenarios: Given, Then, When, Examples ) cucumber.properties target classes cucumber-reports generated-sources generated-test-sources test-classes pom.xml (This file contains all dependencies and plugins)","title":"02. Brief details about the files and folders"},{"location":"de/pages/qa-automations/qa_automations_selenium_java/#03-dependencies-list-pomxml","text":"build plugins plugin: - groupId: org.apache.maven.plugins - artifactId: maven-surefire-plugin - version: 3.0.0-M5 - configuration: - suiteXmlFile: testng.xml - groupId: net.masterhought - artifactId: maven-cucumber-reporting - version: 5.3.0 dependencies dependency: - groupId: io.testproject - artifactId: java-sdk - version: 1.2.3.-RELEASE - groupId: org.seleniumhq.selenium - artifactId: selenium-java - version: 3.141.59 - groupId: org.testng - artifactId: testng - version: 7.3.0 - groupId: io.cucumber - artifactId: cucumber-java - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-testng - version: 6.7.0 - groupId: io.cucumber - artifactId: cucumber-core - version: 6.7.0 - groupId: org.junit.jupiter - artifactId: junit-jupiter-api - version: 5.5.2 - groupId: io.cucumber - artifactId: cucumber-junit - version: 6.11.0 properties - maven.compiler.source: 11 - maven.compiler.target: 11","title":"03. Dependencies list (pom.xml)"},{"location":"de/pages/qa-automations/qa_automations_selenium_java/#04-basic-selenium-actions","text":"Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test","title":"04. Basic selenium actions"},{"location":"de/pages/qa-automations/qa_automations_selenium_java/#05-tips","text":"Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements inside of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements.","title":"05. Tips"},{"location":"de/pages/qa-automations/qa_automations_selenium_java/#06-tutorials-and-useful-links","text":"https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"06. Tutorials and useful links"},{"location":"de/pages/qa-automations/qa_automations_selenium_python/","text":"QA Automation Framework Setup Python + Selenium + HTML Report Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm 01. Installation steps Please do the following steps to set up the framework: Clone the repo & create the virtual env Clone the automations repo: git clone \"file\" Create a virtual env: python -m virtualenv venvs\\automations Activate the virtualenv: . .\\venvs\\automations\\bin\\activate Install dependencies (this can be done from pycharm): selenium==3.14.1 requests==2.23.0 pytest==6.0.1 pytest-html==2.0.1 pytest-xdist==2.5.0 openpyxl==3.0.9 pytest-metadata==1.10.0 PyYAML==5.3.1 c- lang==4.0.post1 urllib3==1.25.10 allure-pytest==2.8.40 stripe==2.37.2 pytz==2020.1 pytest-services==2.2.1 Install Chromedriver Make sure your version of Chrome is up to date, and install the latest Chromedriver for your version from https://chromedriver.chromium.org/. Unzip and copy Chromedriver or Geckodriver to: /Users/username/PycharmProjects/pytestSelenium_project/venv/bin/chromedriver Setup virtual environment: Install test requirements (from ~/projects/automations/): pip install -r test-requirements.txt 02. Brief details about the files and folders - pytestSelenium_project: - directory name: Logs - description: used for execution log files - python package: pageObjects/ - directory name: folder/ - description: this folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page. - directory name: Reports - description: this folder contains .html file - directory name: Screenshot - description: saved screenshot for specific scenario - directory name: TestData - description: .xml files - python package: tests/ - directory name: conf/ - file: confing.ini - description: this file is common file and contains common fixtures related to test scripts. - python package: tests/ - directory name: test_scripts/*.py - description: these are our actual automation test script. - python package: utilities/ - file: readProerties.py - description: this file contains common utility functions. - directory name: venv 03. Pytest commands - Run specific testcase: - pytest -v -s tests/test_scripts/test_login.py - Run specific testcase and create html report: - pytest -v -s \u2013html=Reports\\report.html tests/test_scripts/test_login.py 04. Basic selenium actions Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test 05. Tips Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements within of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements. 06. Tutorials and useful links https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"Selenium (Python)"},{"location":"de/pages/qa-automations/qa_automations_selenium_python/#qa-automation-framework-setup","text":"","title":"QA Automation Framework Setup"},{"location":"de/pages/qa-automations/qa_automations_selenium_python/#python-selenium-html-report","text":"Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm","title":"Python + Selenium + HTML Report"},{"location":"de/pages/qa-automations/qa_automations_selenium_python/#01-installation-steps","text":"Please do the following steps to set up the framework: Clone the repo & create the virtual env Clone the automations repo: git clone \"file\" Create a virtual env: python -m virtualenv venvs\\automations Activate the virtualenv: . .\\venvs\\automations\\bin\\activate Install dependencies (this can be done from pycharm): selenium==3.14.1 requests==2.23.0 pytest==6.0.1 pytest-html==2.0.1 pytest-xdist==2.5.0 openpyxl==3.0.9 pytest-metadata==1.10.0 PyYAML==5.3.1 c- lang==4.0.post1 urllib3==1.25.10 allure-pytest==2.8.40 stripe==2.37.2 pytz==2020.1 pytest-services==2.2.1 Install Chromedriver Make sure your version of Chrome is up to date, and install the latest Chromedriver for your version from https://chromedriver.chromium.org/. Unzip and copy Chromedriver or Geckodriver to: /Users/username/PycharmProjects/pytestSelenium_project/venv/bin/chromedriver Setup virtual environment: Install test requirements (from ~/projects/automations/): pip install -r test-requirements.txt","title":"01. Installation steps"},{"location":"de/pages/qa-automations/qa_automations_selenium_python/#02-brief-details-about-the-files-and-folders","text":"- pytestSelenium_project: - directory name: Logs - description: used for execution log files - python package: pageObjects/ - directory name: folder/ - description: this folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page. - directory name: Reports - description: this folder contains .html file - directory name: Screenshot - description: saved screenshot for specific scenario - directory name: TestData - description: .xml files - python package: tests/ - directory name: conf/ - file: confing.ini - description: this file is common file and contains common fixtures related to test scripts. - python package: tests/ - directory name: test_scripts/*.py - description: these are our actual automation test script. - python package: utilities/ - file: readProerties.py - description: this file contains common utility functions. - directory name: venv","title":"02. Brief details about the files and folders"},{"location":"de/pages/qa-automations/qa_automations_selenium_python/#03-pytest-commands","text":"- Run specific testcase: - pytest -v -s tests/test_scripts/test_login.py - Run specific testcase and create html report: - pytest -v -s \u2013html=Reports\\report.html tests/test_scripts/test_login.py","title":"03. Pytest commands"},{"location":"de/pages/qa-automations/qa_automations_selenium_python/#04-basic-selenium-actions","text":"Instantiate a WebDriver object to drive the browser you want to use in your test Navigate to the web page you want to test Locate the element of the web page you want to test Ensure that the browser is in the correct state to interact with that element Perform the action on the element Record test results Create report and logs Quit the test","title":"04. Basic selenium actions"},{"location":"de/pages/qa-automations/qa_automations_selenium_python/#05-tips","text":"Html DOM consists of: HTML Tags, HTML Attributes and Attributes values Class and ID are also HTML attribute names Class attribute can have several values and each value is separated by space HTML tags usually come in pairs of Opening and Closing tag. Closing tag has the same name and forward slash Value in between angle brackets (>here<) is a plain text Elements above the \u201ckey\u201d web element are Parent elemens Elements within of the \u201ckey\u201d Element are Child Elements Elements placed at the same level side by side are Sibiling Elements Remember to use the best locators (never use absolute XPath or absolute CSS). ID and data attributes are the best for locating elements.","title":"05. Tips"},{"location":"de/pages/qa-automations/qa_automations_selenium_python/#06-tutorials-and-useful-links","text":"https://www.selenium.dev/documentation/webdriver/ https://github.com/nadvolod/selenium-java https://www.youtube.com/watch?v=aIfP8rOx66E&t=1825s&ab_channel=UltimateQA https://www.youtube.com/watch?v=Xjv1sY630Uc&t=189s&ab_channel=TechWithTim","title":"06. Tutorials and useful links"},{"location":"de/pages/qa-automations/qa_automations_selenium_python_seleniumbase/","text":"QA Automation Framework Setup Python + SeleniumBase Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm 01. Installation steps Create a new project in PyCharm Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/PycharmProjects/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Setup Virtual Environment within Pycharm Install Python Install SeleniumBaseIO (https://seleniumbase.io/) Open terminal and type: pip3 install seleniumbase seleniumbase (or sbase) (to check if the installation is passed) Install ChromeDriver Open terminal and type: sbase install chromedriver latest, or sbase install chromedriver 97.0.4692.71 02. SeleniumBase commands Run all tests: pytest Run specific testcase and generate html report: pytest -k test_home 03. Brief details about the files and folders pythonSeleniumBase (root folder) custom_screenshots (This folder contains screenshots) data (This folder contains data: .png, .jpeg...) latest_logs (This folder contains: test_info.txt, page_source_info.html, and screenshot.png) page_objects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) tests (This Python Package folder contains automation test script) venvs (This folder contains all dependencies in our virtual environment) report.html (This file is report) requirements.txt (This file represent all dependencies we use) 04. Tutorials and useful links https://www.youtube.com/watch?v=D0-QGMacMxA&list=PLGLlPuoTA3DURLLEpkJJmN7wXgGztfIo3&index=5&ab_channel=AutomationBro-DilpreetJohal","title":"Selenium (Python-SeleniumBase)"},{"location":"de/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#qa-automation-framework-setup","text":"","title":"QA Automation Framework Setup"},{"location":"de/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#python-seleniumbase","text":"Pre-Requisites: Make sure you have access to git repo: (https://git.nosolutions.rs/) Make sure you have ssh access to your account and key is already added for account. Install PyCharm","title":"Python + SeleniumBase"},{"location":"de/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#01-installation-steps","text":"Create a new project in PyCharm Within your terminal navigate to: C:/Users/Username/Documents/TestingProjects/PycharmProjects/ Clone project repository: git clone https://git.nosolutions.rs/vladan.furman/onboarding-selenium.git Setup Virtual Environment within Pycharm Install Python Install SeleniumBaseIO (https://seleniumbase.io/) Open terminal and type: pip3 install seleniumbase seleniumbase (or sbase) (to check if the installation is passed) Install ChromeDriver Open terminal and type: sbase install chromedriver latest, or sbase install chromedriver 97.0.4692.71","title":"01. Installation steps"},{"location":"de/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#02-seleniumbase-commands","text":"Run all tests: pytest Run specific testcase and generate html report: pytest -k test_home","title":"02. SeleniumBase commands"},{"location":"de/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#03-brief-details-about-the-files-and-folders","text":"pythonSeleniumBase (root folder) custom_screenshots (This folder contains screenshots) data (This folder contains data: .png, .jpeg...) latest_logs (This folder contains: test_info.txt, page_source_info.html, and screenshot.png) page_objects (This Python Package folder contains page object file which represents the screens of your web app as a series of objects and encapsulates the features represented by a page.) tests (This Python Package folder contains automation test script) venvs (This folder contains all dependencies in our virtual environment) report.html (This file is report) requirements.txt (This file represent all dependencies we use)","title":"03. Brief details about the files and folders"},{"location":"de/pages/qa-automations/qa_automations_selenium_python_seleniumbase/#04-tutorials-and-useful-links","text":"https://www.youtube.com/watch?v=D0-QGMacMxA&list=PLGLlPuoTA3DURLLEpkJJmN7wXgGztfIo3&index=5&ab_channel=AutomationBro-DilpreetJohal","title":"04. Tutorials and useful links"}]}